// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

enum CarFeature {
  Bluetooth
  GPS
  HeatedSeats
  Sunroof
  ParkingSensors
  CruiseControl
  AirConditioning
  AlloyWheels
  ChildSeat
  AutomaticTransmission
  GPSNavigation
}

enum CarType {
  Sedan
  SUV
  Convertible
  Truck
  Electric
  Minivan
  Hatchback
  Coupe
}

enum ReservationStatus {
  Pending
  Approved
  Rejected
  Completed
  Cancelled
}

enum PaymentStatus {
  Pending
  Paid
  PartiallyPaid
  Overdue
  Refunded
}

enum TransmissionType {
  All
  Manual
  Automatic
}

enum FuelType {
  combustion
  Electric
  Hybrid
}

model Car {
  id            Int          @id @default(autoincrement())
  name          String
  description   String
  pricePerDay   Float
  availableFrom DateTime
  availableTo   DateTime
  carType       CarType
  carFeatures   CarFeature[]

  seats        Int
  transmission TransmissionType
  fuelType     FuelType
  brand        String

  imageUrls        String[]
  locationId       Int
  rating           Float?   @default(0)
  numberOfReviews  Int?     @default(0)
  managerCognitoId String

  manager      Manager       @relation(fields: [managerCognitoId], references: [cognitoId])
  location     Location      @relation(fields: [locationId], references: [id])
  reservations Reservation[]
  applications Application[]
  favoritedBy  Renter[]      @relation("RenterFavorites")
  renters      Renter[]      @relation("RenterCars")
}

model Manager {
  id          Int    @id @default(autoincrement())
  cognitoId   String @unique
  name        String
  email       String
  phoneNumber String

  cars Car[]
}

model Renter {
  id          Int    @id @default(autoincrement())
  cognitoId   String @unique
  name        String
  email       String
  phoneNumber String

  reservations Reservation[]
  cars         Car[]         @relation("RenterCars")
  favorites    Car[]         @relation("RenterFavorites")
  applications Application[]
}

model Reservation {
  id              Int               @id @default(autoincrement())
  carId           Int
  renterCognitoId String
  startDate       DateTime
  endDate         DateTime
  totalPrice      Float
  status          ReservationStatus
  paymentStatus   PaymentStatus     @default(Pending)

  car      Car       @relation(fields: [carId], references: [id])
  renter   Renter    @relation(fields: [renterCognitoId], references: [cognitoId])
  payments Payment[]
}

model Application {
  id              Int     @id @default(autoincrement())
  name            String
  email           String
  phoneNumber     String
  message         String?
  carId           Int
  renterCognitoId String

  car    Car    @relation(fields: [carId], references: [id])
  renter Renter @relation(fields: [renterCognitoId], references: [cognitoId])
}

model Payment {
  id            Int           @id @default(autoincrement())
  amountDue     Float
  amountPaid    Float
  dueDate       DateTime
  paymentDate   DateTime?
  paymentStatus PaymentStatus
  reservationId Int

  reservation Reservation @relation(fields: [reservationId], references: [id])
}

model Location {
  id          Int                                   @id @default(autoincrement())
  address     String
  city        String
  state       String
  country     String
  postalCode  String
  coordinates Unsupported("geography(Point, 4326)")

  cars Car[]
}
